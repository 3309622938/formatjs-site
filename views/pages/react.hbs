{{setTitle "React"}}
{{setDescription "Documentation and examples of React integration."}}

<section class="head">
    {{> nav}}
</section>

<section class="intro">
    <div class="l-wrap">
        <h1 class="intro-package">
            <span class="intro-package-name">
                React Intl
            </span>
            <img class="intro-package-mark" alt="React logo" src="/img/react.svg">
        </h1>

        <h2 class="tagline">{{package.description}}</h2>

        {{> integrations/package-meta}}
    </div>

    {{> integrations/package-install}}
</section>

<section class="main docs l-wrap">
    <p>
        This library provides a mixin to internationalize your <a href="http://facebook.github.io/react/">React</a> components.
    </p>


    <h2>Features</h2>

    <ul>
        <li>
            Formats <strong>numbers</strong> and <strong>dates/times</strong>, including those in complex messages.
        </li>
        <li>
            Formats <strong>relative times</strong> (e.g., "3 hours ago").
        </li>
        <li>
            Formats complex messages, including <strong>plural</strong> and <strong>select</strong> arguments using <a href="{{pathTo 'guide'}}#messageformat-syntax">ICU Message syntax</a>.
        </li>
        <li>
            Supports custom formatters for <strong>numbers</strong> and <strong>dates/times</strong>.
        </li>
    </ul>


    <h2>Mixin Methods</h2>

    <ul>
        <li>
            <a href="#formatDate"><code>formatDate()</code></a> formats a date value
        </li>
        <li>
            <a href="#formatTime"><code>formatTime()</code></a> formats a date value with time formats
        </li>
        <li>
            <a href="#formatRelative"><code>formatRelative()</code></a> formats a date relative to now; e.g. "3 hours ago"
        </li>
        <li>
            <a href="#formatNumber"><code>formatNumber()</code></a> formats a number value
        </li>
        <li>
            <a href="#formatMessage"><code>formatMessage()</code></a> formats a translated string message
        </li>
        <li>
            <a href="#getIntlMessage"><code>getIntlMessage()</code></a> looks up a translated string message by path
        </li>
    </ul>


    <h2>How It Works</h2>

    <h3>Create a React Component with <code>ReactIntlMixin</code></h3>

{{#code "js"}}
/** @jsx React.DOM */
var Component = React.createClass({
    mixins: [ReactIntlMixin],

    render: function () {
        return (
            <p>
                {this.formatNumber(1000, {
                    style   : 'currency',
                    currency: 'USD'
                })}
            </p>
        );
    }
});
{{/code}}

    <h3>Render the Component</h3>

{{#code "js"}}
/** @jsx React.DOM */
React.renderComponent(
    <Component locales={['en-US']} />,
    document.getElementById('example')
);
{{/code}}

    <div class="example">
        <div class="example-output">
            <h4 class="example-output-heading">Rendered</h4>
            <div class="react-output">
                <p>$1,000.00</p>
            </div>
        </div>
    </div>


    <h2 id="usage">Usage</h2>

    <h3 id="install-browser">Browser</h3>

    <h4>1. Load the scripts onto your page</h4>

{{#code "html"}}
<script src="react/react.min.js"></script>
<script src="react-intl/react-intl.min.js"></script>
{{/code}}

    <h4>2. Use ReactIntlMixin in a React component</h4>

{{#code "js"}}
var MyComponent = React.createClass({
    mixins: [ReactIntlMixin],
    render: function () {...}
});
{{/code}}

    <p class="note">
        <strong>Note:</strong> Older browsers and Safari do not provide the global {{code "Intl"}} object (ECMA-402). Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch the browser</a> using a polyfill.
    </p>

    <h3 id="install-node">Node/CommonJS</h3>

    <h4>1. Require the module</h4>

{{#code "js"}}
if (!global.Intl) {
    global.Intl = require('intl'); // install and use polyfill for ECMA-402
}
var React = require('react');
var ReactIntlMixin = require('react-intl');
{{/code}}

    <h4>2. Use ReactIntlMixin in a React component</h4>

{{#code "js"}}
var MyComponent = React.createClass({
    mixins: [ReactIntlMixin],
    render: function () {...}
});
{{/code}}

    <p class="note">
        <strong>Note:</strong> Node.js (as of 0.10) doesn't provide the global <code>Intl</code> object (ECMA-402).Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch Node.js</a> using a polyfill.
    </p>


    <h2 id="formatNumber">Format Numbers with Separators</h2>

    <p>
        The <code>this.formatNumber()</code> method is used to represent a number in a way appropriate for the current locale. It formats numbers using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat"><code>Intl.NumberFormat</code></a>, and returns the formatted string value.
    </p>

    {{~> example examples.number}}

    <p>
        Specifying format options (e.g.: <code>{style: "currency", currency: "USD"}</code>) in every call to <code>this.formatNumber()</code> in your components can become a problem in large code bases, and isn't DRY. Instead, you can provide a vale for the <code>formats</code> component prop.
    </p>

    {{~> example examples.numberCustom}}

    <p>
        In the example above, <code>"USD"</code> and <code>"percentage"</code> are keys to custom number formats defined in the <code>formats.number</code> component prop. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    <p>
        See the <a href="#custom-formats">custom formats section</a> for more information.
    </p>


    <h2 id="formatDate">Format Dates and Times Correctly</h2>

    <p>
        The <code>this.formatDate()</code> method is used to represent a date in a way appropriate for the current locale. It formats dates using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"><code>Intl.DateTimeFormat</code></a>, and returns the formatted string value.
    </p>

    {{~> example examples.date}}

    <p>
        Specifying formatting options (e.g.: <code>{day: "numeric", month: "long", year: "numeric"}</code>) in every call to <code>this.formatDate()</code> in your components can become a problem in large code bases, and isn't DRY. Instead, you can provide a vale for the <code>formats</code> component prop.
    </p>

    {{~> example examples.dateCustom}}

    <p>
        In the example above, <code>"short"</code> is the key to a custom date format defined in the <code>formats.date</code> component property. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    <p>
        See the <a href="#custom-formats">custom formats section</a> for more information.
    </p>

    <p id="formatTime">
        The <code>this.formatTime()</code> method is just like the <code>this.formatDate()</code> method, except it will reference any string-named format from <code>formats.time</code> component prop.
    </p>


    <h2 id="formatRelative">Format Dates Relative To "now"</h2>

    <p>
        The <code>this.formatRelative()</code> method is used to represent a relative time in a way appropriate for the current locale. It formats the relative time following the rules from <a href="http://cldr.unicode.org/">Unicode CLDR</a>, and returns the formatted string value.
    </p>

    {{~> example examples.relative}}

    <p>
        By default, the relative time is formatted using the best fit unit of time. However, you can explicitly set the <code>units</code> option one of the following values:<br> <code>"second"</code>, <code>"minute"</code>, <code>"hour"</code>, <code>"day"</code>, <code>"month"</code> or <code>"year"</code>.
    </p>

    {{~> example examples.relativeUnits}}

    <p>
        The <code>style</code> option provides another level of customization. By default, the relative time is computed with a <code>"best fit"</code> style, which means, for example, that instead of "1 day ago", it will display "yesterday", or "in 1 year" will be "next year", etc. The other <code>style</code> is <code>"numeric"</code>, in which the output will <em>always</em> contain a number.
    </p>

    {{~> example examples.relativeStyle}}

    <p>
        Passing formatting options (e.g.: <code>{style: 'numeric'}</code>) in every call to <code>this.formatRelative()</code> in your components can become a problem in large code bases. Instead, you can provide a component property called <code>formats</code> to simplify that.
    </p>

    {{~> example examples.relativeCustom}}

    <p>
        In the example above, <code>"hours"</code> is the key to a custom relative format defined in the <code>formats.relative</code> component prop. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    <p>
        See <a href="#custom-formats">the custom formats section</a> for more information.
    </p>

    <h2 id="formatMessage">Pluralize Labels in Strings</h2>

    <p>
        When trying to internationalize a React component, you will need a way to localize your UI strings, including any logic pieces like pluralization rules for all the languages you wish to support. These strings should be externalized from your React components so that the same React component can be used for all languages. This library provides two methods that can work together to provide a way to lookup and format language-specific strings.
    </p>

    <p id="getIntlMessage">
        The <code>this.getIntlMessage()</code> method implements a look-up process to resolve the localized strings from the component's <code>messages</code> prop. This method takes a string path/namespace to a localized string with the <code>messsages</code> object; e.g., <code>"photos.likeButtonLabel"</code>.
    </p>

    <p>
        The <code>this.formatMessage()</code> method formats a translated messages written in the <a href="http://userguide.icu-project.org/formatparse/messages">ICU Message</a> syntax, which is used by professional translators. The message format supports placeholders, plus choosing different strings based on pluralization, gender, or other criteria.
    </p>

    <p>
        See the <a href="{{pathTo 'guide'}}#messageformat-syntax">Guide</a> for  details on how to write those messages using the ICU Message syntax.
    </p>

    {{~> example examples.message}}

    <p>
        In the example above, <code>var message = this.getIntlMessage('photos');</code> will return the <code>"photos"</code> message provided at <code>this.props.messages.photos</code>. Beyond the basic nested object value look-up process, it provides descriptive error messages when accessing a property that is <code>undefined</code>. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    <p class="note">
        <b>Note:</b> You can provide the <code>messages</code> property value to the root React component when rendering a the top-level component in the React hierarchy, and <strong>messages</strong> &mdash; just like <strong>locales</strong> &mdash; will be propagated to any child components using <code>ReactIntlMixin</code>.
    </p>

    <p>
        Additionally, you can leverage <a href="#custom-formats">custom formats</a> as described below, to specify a set of named format options to use in your messages, e.g: <code>{someNum, number, USD}</code> and <code>{someDate, date, short}</code> or <code>{someTime, time, long}</code>.
    </p>


    <h2 id="custom-formats">Creating Your Own Custom Formats</h2>

    <p>
        The React Intl Mixin allows you to define named format options that can be used throughout the entire application or within a component subtree. These named format options can be specified for <code>date</code>, <code>time</code>, <code>number</code> and <code>relative</code> format types. The following example illustrates how these custom formats work.
    </p>

    {{~> example examples.custom}}

    <p>
        In the example above, <code>"USD"</code>, <code>"short"</code>, <code>"hhmm"</code>, and <code>"hours"</code> are the named custom formats defined in <code>formats</code> component prop. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    <p class="note">
        <b>Note:</b> You can provide <code>formats</code> property value at the root React component when rendering the top-level component in the React hierarhy, and <strong>formats</strong> &mdash; just like <strong>messages</strong> and <strong>locales</strong> &mdash; will be propagated to any component child components using <code>ReactIntlMixin</code>.
    </p>

</section>
