{{setTitle "React"}}
{{setDescription "Documentation and examples of React integration."}}

<section class="head">
    {{> nav}}
</section>

<section class="intro">
    <div class="l-wrap">
        <h1 class="intro-package">
            <span class="intro-package-name">
                React Intl
            </span>
            <img class="intro-package-mark" alt="React logo" src="/img/react.svg">
        </h1>

        <h2 class="tagline">{{package.description}}</h2>

        {{> integrations/package-meta}}

    </div>

    {{> integrations/package-install}}
</section>

<section class="main docs l-wrap">
    <ul>
        <li><a href="#formatDate"><code>formatDate()</code></a> to format a date value</li>
        <li><a href="#formatTime"><code>formatTime()</code></a> to format a date value with time formats</li>
        <li><a href="#formatRelative"><code>formatRelative()</code></a> to format a date relative to now; e.g. "3 hours ago"</li>
        <li><a href="#formatNumber"><code>formatNumber()</code></a> to format a numeric value</li>
        <li><a href="#formatMessage"><code>formatMessage()</code></a> to format a complex message</li>
    </ul>

    <p>
        There is one more method called <a href="#intl"><code>getIntlMessage()</code></a> that can be used to
        lookup for a message by key.
    </p>

    <h2 id="installation">Installation</h2>


    <h3 id="install-browser">Browser</h3>
    <ol>
        <li>
            Install with <a href="http://bower.io/">bower</a>:
{{#code "js"}}
bower install react-intl
{{/code}} or download directly from:

            <ul>
                <li><a href="{{cdnUrl 'react-intl/dist/react-intl.min.js'}}">react-intl.min.js ({{size "react-intl/dist/react-intl.min.js"}} gz)</a></li>
                <li><a href="{{cdnUrl 'react-intl/dist/react-intl-with-locales.min.js'}}">react-intl-with-locales.min.js ({{size "react-intl/dist/react-intl-with-locales.min.js"}} gz)</a></li>
            </ul>

        </li>
        <li>Load the scripts into your page.
{{#code "html"}}
<script src="react/react.min.js"></script>
<script src="react-intl/react-intl.min.js"></script>
{{/code}}
        </li>
        <li>Use ReactIntlMixin in a React component:
{{#code "js"}}
var MyComponent = React.createClass({
    mixins: [ReactIntlMixin],
    render: function () {...}
});
{{/code}}
        </li>
    </ol>
    <p class="note">
    <strong>NOTE:</strong>
    Older browsers and Safari do not provide the global {{code "Intl"}} object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch the browser</a> using a polyfill.
    </p>


    <h3 id="install-node">Node/CommonJS</h3>
    <ol>
        <li>You can install the helpers with npm:
{{#code "js"}}
npm install intl react-intl
{{/code}}
        </li>
        <li>Load in the module and register it:
{{#code "js"}}
if (!global.Intl) {
    global.Intl = require('intl'); // use polyfill for ECMA-402
}
var React = require('react');
var ReactIntlMixin = require('react-intl');
{{/code}}
</li>
        <li>Use ReactIntlMixin in a React component:
{{#code "js"}}
var MyComponent = React.createClass({
    mixins: [ReactIntlMixin],
    render: function () {...}
});
{{/code}}
        </li>
    </ol>

    <p class="note">
    <strong>NOTE:</strong>
    Node (as of 0.10) doesn't provide the global <code>Intl</code> object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch the browser</a> using a polyfill.
    </p>

    <h2 id="custom-formats">The "formats" component property</h2>

    <p>
    The ReactIntl mixin allows you to define named configuration options that you can reuse within the entire application or within a component subtree. The following example illustrates how these custom formats work.
    </p>

    {{~> example examples.custom}}

    <h2 id="formatNumber">formatNumber(number[, options])</h2>
    <p>
    This method is used to present a number in a way appropriate for the current locale.
    It can be used for displaying plain numbers as well as currency or percentages.
    </p>

    <h3 id="formatNumber-parameters">Parameters</h3>
    <dl>
        <dt><code>number</code> (required)</dt>
        <dd>
            This is the value which will be formatted.
        </dd>
        <dt>options (optional)</dt>
        <dd>
            If the second parameter is a string, it will be looked up in the <code>formats.number</code> component property.
        </dd>
        <dd>
            If the <code>options</code> parameter is an object, it will be passed to the <code>Intl.NumberFormat()</code> constructor and used to configure how the date is displayed.
        </dd>
    </dl>

    <h3>Live Example</h3>
    {{~> example examples.number}}

    <h2 id="formatDate">formatDate(date[, options])</h2>
    <p>
    This method is used to present a date in a way appropriate for the current locale.
    </p>

    <h3 id="formatDate-parameters">Parameters</h3>
    <dl>
        <dt><code>date</code> (required)</dt>
        <dd>
            This is the value which will be formatted. It can be either a <code>Date</code> object or a number timestamp.
        </dd>
        <dt>options (optional)</dt>
        <dd>
            If the second parameter is a string, it will be looked up in the <code>formats.date</code> component property.
        </dd>
        <dd>
            If the <code>options</code> parameter is an object, it will be passed to the <code>Intl.DateTimeFormat()</code> constructor and used to configure how the date is displayed.
        </dd>
    </dl>

    <h3>Live Example</h3>
    {{~> example examples.date}}

    <h2 id="formatRelative">formatRelative(date[, options])</h2>
    <p>
    This method is used to present a relative time, also called timeago.
    It displays a how much time has elapsed since a particular date, usually using natural language.
    </p>

    <h3 id="formatRelative-parameters">Parameters</h3>
    <dl>
        <dt><code>date</code> (required)</dt>
        <dd>
            This is the value which will be formatted. It can be either a <code>Date</code> object or a number timestamp.
        </dd>
        <dt>options (optional)</dt>
        <dd>
            If the second parameter is a string, it will be looked up in the <code>formats.relative</code> component property.
        </dd>
        <dd>
            If the <code>options</code> parameter is an object, it will be passed to the <code>IntlRelativeFormat()</code> constructor and used to configure how the date is displayed.
        </dd>
    </dl>

    <h3>Live Example</h3>
    {{~> example examples.relative}}

    <h2 id="formatMessage">formatMessage(message[, options])</h2>
    <p>
    In order to use the <code>formatMessage()</code> method you'll need to translate your strings into all the languages you wish to show.
    These translations are provided in the <a href="http://userguide.icu-project.org/formatparse/messages">ICU Message</a> syntax, which is familiar to professional translators.
    The message format also supports choosing different strings based on pluralization, gender, or other considerations.
    See the <a href="{{pathTo 'guide'}}#messageformat-syntax">Guide</a> for more details on how to
    write those messages.
    </p>

    <h3 id="formatMessage-parameters">Parameters</h3>
    <dl>
        <dt><code>message</code> (required)</dt>
        <dd>
            This is the string message which will be formatted.
        </dd>
        <dt>options (optional)</dt>
        <dd>
            If the second parameter is a string, it will be looked up in the <code>formats.message</code> component property.
        </dd>
        <dd>
            If the <code>options</code> parameter is an object, it will be passed to the <code>IntlMessageFormat()</code> constructor and used to configure how the date is displayed.
        </dd>
    </dl>

    <h3>Live Example</h3>
    {{~> example examples.message}}

</section>
