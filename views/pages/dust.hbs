{{setTitle "Dust"}}
{{setDescription "Documentation and examples of Dust integration."}}

<section class="head">
    {{> nav}}
</section>

<section class="intro">
    <div class="l-wrap">
        <h1 class="intro-package">
            <span class="intro-package-name">
                Dust Intl
            </span>
            <img class="intro-package-mark" alt="Dust logo" src="/img/dust.svg">
        </h1>

        <h2 class="tagline">{{package.description}}</h2>

        {{> integrations/package-meta}}

    </div>

    {{> integrations/package-install}}
</section>

<section class="main docs l-wrap">

    <p>This library provides a series of helpers to internationalize your <a href="http://linkedin.github.io/dustjs/">dust templates</a>:</p>

    <h2>Features</h2>

    <ul>
        <li>Formats <strong>numbers</strong>, <strong>dates</strong>, and <strong>times</strong> including those in complex messages.</li>
        <li>Formats <strong>relative times</strong> (e.g., "3 hours ago").</li>
        <li>Formats complex messages including <strong>plural</strong> and <strong>select</strong> arguments using <a href="{{pathTo 'guide'}}#messageformat-syntax">ICU Message syntax</a>.</li>
        <li>Supports custom formatters for <strong>numbers</strong>, <strong>dates</strong>, and <strong>times</strong>.</li>
    </ul>


    <h2>Helpers</h2>

    <ul>
        <li><a href="#formatDate"><code>{@formatDate}</code></a> to format a date value</li>
        <li><a href="#formatTime"><code>{@formatTime}</code></a> to format a date value with time formats</li>
        <li><a href="#formatRelative"><code>{@formatRelative}</code></a> to format a date relative to now; e.g. "3 hours ago"</li>
        <li><a href="#formatNumber"><code>{@formatNumber}</code></a> to format a numeric value</li>
        <li><a href="#formatMessage"><code>{@formatMessage}</code></a> to format a complex message</li>
        <li><a href="#intl"><code>{@intl}</code></a> to create intl data scope in a block</li>
    </ul>

    <h2>How It Works</h2>

    <p><strong>Template Source:</strong></p>

{{#code "dust"}}
<b>Price:</b> {@formatNumber val=price style="currency" currency="USD"/}
{{/code}}

    <p><strong>Render Template:</strong></p>

{{#code "js"}}
var context = {
    intl: {
        locales: 'en-US'
    },
    price: 1000
};

dust.renderSource(template, context, function(error, html) {
    // rendered html available here
});
{{/code}}

    <p><strong>Output:</strong></p>

{{#code "html"}}
<b>Price:</b> $1,000.00
{{/code}}


    <h2 id="installation">Usage</h2>


    <h3 id="install-browser">Browser</h3>

    <h4>1. Load the scripts into your page</h4>
{{#code "html"}}
<script src="dustjs-linkedin/dust-full.min.js"></script>
<script src="dust-intl/dust-intl.min.js"></script>
{{/code}}

    <h4>2. Register the helpers</h4>
{{#code "js"}}
DustIntl.registerWith(dust);
{{/code}}

    <p class="note">
    <strong>NOTE:</strong>
    Older browsers and Safari do not provide the global {{code "Intl"}} object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#patch-runtime">how to patch the browser</a> using a polyfill.
    </p>


    <h3 id="install-node">Node/CommonJS</h3>

    <h4>1. Require the module</h4>

{{#code "js"}}
if (!global.Intl) {
    global.Intl = require('intl'); // use polyfill for ECMA-402
}
var dust = require('dustjs-linkedin');
var DustIntl = require('dust-intl');
{{/code}}

    <h4>2. Register the helpers</h4>

{{#code "js"}}
DustIntl.registerWith(dust);
{{/code}}

    <p class="note">
    <strong>NOTE:</strong>
    Node (as of 0.10) doesn't provide the global <code>Intl</code> object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#patch-runtime">how to patch node</a> using a polyfill.
    </p>


    <h2 id="formatNumber">Format Numbers with Separators</h2>

    <p>
        The <code>{@formatNumber}</code> helper is used to present a number in a way appropriate for the current locale.
        It formats numbers using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat">Intl.NumberFormat</a> and returns the formatted string value.
    </p>

    {{~> example examples.number}}

    <p>
        Passing the formatting options (e.g.: <code>style="currency" currency="USD"</code>) in every call to <code>{@formatNumber}</code> in your templates can be a burden in a large code base, or simply because you use a different currency value per locale. Instead, you can use <a href="#context-formats"><code>context.intl.formats.number</code></a> to define custom number formats to simplify that.</p>

    {{~> example examples.numberCustom}}

    <p>In the example above, <code>formatName="USD"</code> and <code>formatName="percentage"</code> are the keys to  custom number formats passed in <code>intlData</code> when rendering the template. Check the <strong>RENDER</strong> tab to see the details.</p>

    <p>See <a href="#custom-formats">the custom formats section</a> for more information.</p>



    <h2 id="formatDate">Format Dates and Times Correctly</h2>

    <p>
        The <code>{@formatDate}</code> helper is used to present a date in a way appropriate for the current locale. It formats dates using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">Intl.DateTimeFormat</a> and returns the formatted string value.
    </p>

    {{~> example examples.date}}

    <p>
        Passing the formatting options (e.g.: <code>day="numeric" month="long" year="numeric"</code>) in every call to <code>{@formatDate}</code> in your templates can be a burden in a large code base, or simply because you want to use different options for different locales. Instead, you can use <a href="#context-formats"><code>context.intl.formats.date</code></a> to define custom date formats to simplify that.</p>

    {{~> example examples.dateCustom}}

    <p>In the example above, <code>formatName="short"</code> is the key to a custom date format defined in <code>formats.date</code> in <code>intlData</code>. Check the <strong>RENDER</strong> tab to see the details.</p>

    <p>See <a href="#custom-formats">the custom formats section</a> for more information.</p>



    <p id="formatTime">
        The <code>{@formatTime}</code> is just like the <code>{@formatDate}</code> helper except it will reference any custom formats from <code>context.intl.formats.time</code>.
    </p>


    <h2 id="formatRelative">Format Dates Relative to "Now"</h2>

    <p>
        The <code>{@formatRelative}</code> helper is used to present a relative time in a way appropriate for the current locale.
        It formats the relative time following the rules from <a href="http://cldr.unicode.org/">Unicode CLDR</a> and returns the formatted string value.
    </p>

    {{~> example examples.relative}}

    <p>
        By default, the relative time is computed to the best fit, but you can explicitly choose <code>units</code> to be displayed in <code>"second"</code>, <code>"minute"</code>, <code>"hour"</code>, <code>"day"</code>, <code>"month"</code> or <code>"year"</code>.
    </p>

    {{~> example examples.relativeUnits}}

    <p>
        By default relative time will use locale-specific shorthand for certain relative times.
        For example, "1 day ago" will displayed as <code>yesterday</code>, "in 1 year" will be displayed as <code>next year</code>, etc.
        You can use <code>style="numeric"</code> to show numeric values always.
    </p>

    {{~> example examples.relativeStyle}}


    <p>Passing formatting options (e.g.: <code>style="numeric"</code>) in every call to <code>{@formatRelative}</code> in your templates can become a problem in large code bases. Instead, you can setup <code>context.intl.formats.relative</code> to define custom relative formats to simplify that.</p>

    {{~> example examples.relativeCustom}}

    <p>In the example above, <code>formatName="exact"</code> is the key to a custom date format defined in <code>formats.relative</code> in <code>intlData</code>. Check the <strong>RENDER</strong> tab to see the details.</p>

    <p>See <a href="#custom-formats">the custom formats section</a> for more information.</p>



    <h2 id="formatMessage">Format Labels in the Template</h2>


    <p>When trying to internationalize a Dust template, you will need a way to localize the UI strings and logic for all the languages you wish to show, to render the exact same template in various locales by providing the localized messages.</p>

    <p>
        The <code>{@formatMessage}</code> helper is used to display messages that have been translated for the user's locale.
        In order to use it you'll need to translate your strings into all the languages you wish to show.
        These translations are provided in the <a href="{{pathTo 'guide'}}#messageformat-syntax">ICU Message</a> syntax, which is familiar to professional translators.
        The message format also supports choosing different strings based on pluralization, gender, or other considerations.
    </p>

    {{~> example examples.message}}

    <p>In the example above, <code>_key</code> is used to apply a look up process by path to resolve the localized messages from <code>context.intl.messages</code> passed into the template. Essentially, you can use the path to a message in the template to resolve the right message. More details about this helper below.</p>


    <h2 id="intl">Create Intl Lambda</h2>

    <p><code>\{@intl}</code> is a block helper that can be used to create a new intl data scope by updating the intl data supplied to Dust within the block. This is useful when you need to render part of the page in a particular locale &mdash; some Dust integrations might not support supplying <code>context.intl</code> when rendering. You can also use it to have different sections of the page rendered with different locales.</p>

    {{~> example examples.intl}}

    <p>You can apply the same principle for <code>formats</code> and <code>messages</code>, which are normally passed thru <code>intlData</code> value when rendering the template. Check the <strong>RENDER</strong> tab to see the details.</p>



    <h2 id="custom-formats">Writing your own custom formats</h2>

    <p>
    This library allows you to define named configuration options that you can reuse within the entire application or within a template and its partials, esentially creating your own custom formatting rules. These rules can be specified for <code>date</code>, <code>time</code>, <code>number</code> and <code>relative</code>. The following example illustrates how these custom formats work.
    </p>

    {{~> example examples.custom}}

    <p>In the example above, <code>formatName="short"</code>, <code>formatName="exact"</code>, <code>formatName="hhmm"</code> and <code>formatName="USD"</code> are the keys to custom  formats defined in <code>formats</code> in <code>intlData</code>. Check the <strong>RENDER</strong> tab to see the details.</p>

    <p>You can provide <code>formats</code> property at the application level when rendering the top level template, and <strong>formats</strong> &mdash; just like <strong>messages</strong> and <strong>locales</strong> &mdash; will be propagated to any partial and block.</p>



</section>
