{{setTitle "Dust"}}
{{setDescription "Documentation and examples of Dust integration."}}

<section class="head">
    {{> nav}}
</section>

<section class="intro">
    <div class="l-wrap">
        <h1 class="intro-package">
            <span class="intro-package-name">
                Dust Intl
            </span>
            <img class="intro-package-mark" alt="Dust logo" src="/img/dust.svg">
        </h1>

        <h2 class="tagline">{{package.description}}</h2>

        {{> integrations/package-meta}}

    </div>

    {{> integrations/package-install}}
</section>

<section class="main docs l-wrap">


    <h2>Features</h2>

    <ul>
        <li>Formats <strong>numbers</strong>, <strong>dates</strong>, and <strong>times</strong> including those in complex messages.</li>
        <li>Formats <strong>relative times</strong> (e.g., "3 hours ago").</li>
        <li>Formats complex messages including <strong>plural</strong> and <strong>select</strong> arguments using <a href="{{pathTo 'guide'}}#messageformat-syntax">ICU Message syntax</a>.</li>
        <li>Supports custom formatters for <strong>numbers</strong>, <strong>dates</strong>, and <strong>times</strong>.</li>
    </ul>


    <h2>Helpers</h2>

    <ul>
        <li><a href="#formatDate"><code>{@formatDate}</code></a> to format a date value</li>
        <li><a href="#formatTime"><code>{@formatTime}</code></a> to format a date value with time formats</li>
        <li><a href="#formatRelative"><code>{@formatRelative}</code></a> to format a date relative to now; e.g. "3 hours ago"</li>
        <li><a href="#formatNumber"><code>{@formatNumber}</code></a> to format a numeric value</li>
        <li><a href="#formatMessage"><code>{@formatMessage}</code></a> to format a complex message</li>
    </ul>

    <p>
        There is one more block helper called <a href="#intl"><code>{@intl}</code></a> that can be used to create
        a new intl data scope. This is useful when you need to render part of the page in a particular
        locale, or need to supply the i18n data to Dust via a different part of the template context.
    </p>


    <h2>How It Works</h2>

    <p><strong>Template Source:</strong></p>

{{#code "dust"}}
<b>Price:</b> {@formatNumber val=price style="currency" currency="USD"/}
{{/code}}

    <p><strong>Render Template:</strong></p>

{{#code "js"}}
var context = {
    intl: {
        locales: 'en-US'
    },
    price: 1000
};

dust.renderSource(template, context, function(error, html) {
    // rendered html available here
});
{{/code}}

    <p><strong>Output:</strong></p>

{{#code "html"}}
<b>Price:</b> $1,000.00
{{/code}}


    <h2 id="installation">Installation</h2>


    <h3 id="install-browser">Browser</h3>
    <ol>
        <li>
            Install with <a href="http://bower.io/">bower</a>:
{{#code "js"}}
bower install dust-intl
{{/code}} or download directly from:

            <ul>
                <li><a href="{{cdnUrl 'dust-intl/dist/dust-intl.min.js'}}">dust-intl.min.js ({{size "dust-intl/dist/dust-intl.min.js"}} gz)</a></li>
                <li><a href="{{cdnUrl 'dust-intl/dist/dust-intl-with-locales.min.js'}}">dust-intl-with-locales.min.js ({{size "dust-intl/dist/dust-intl-with-locales.min.js"}} gz)</a></li>
            </ul>

        </li>
        <li>Load the scripts into your page.
{{#code "html"}}
<script src="dustjs-linkedin/dust-full.min.js"></script>
<script src="dust-intl/dust-intl.min.js"></script>
{{/code}}
        </li>
        <li>Register the helpers:
{{#code "js"}}
DustIntl.registerWith(dust);
{{/code}}
        </li>
    </ol>
    <p class="note">
    <strong>NOTE:</strong>
    Older browsers and Safari do not provide the global {{code "Intl"}} object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#patch-runtime">how to patch the browser</a> using a polyfill.
    </p>


    <h3 id="install-node">Node/CommonJS</h3>
    <ol>
        <li>You can install the helpers with npm:
{{#code "js"}}
npm install intl dust-intl
{{/code}}
        </li>
        <li>Load in the module and register it:
{{#code "js"}}
if (!global.Intl) {
    global.Intl = require('intl'); // use polyfill for ECMA-402
}
var dust = require('dustjs-linkedin');
var DustIntl = require('dust-intl');
DustIntl.registerWith(dust);
{{/code}}
        </li>
    </ol>

    <p class="note">
    <strong>NOTE:</strong>
    Node (as of 0.10) doesn't provide the global <code>Intl</code> object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#patch-runtime">how to patch node</a> using a polyfill.
    </p>


    <h2 id="formatNumber">Format Numbers with Separators</h2>

    <p>
        The <code>{@formatNumber}</code> helper is used to present a number in a way appropriate for the current locale.
        It formats numbers using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat">Intl.NumberFormat</a> and returns the formatted string value.
    </p>

    {{~> example examples.number}}

    <p>
        Passing the formatting options (e.g.: <code>style="currency" currency="USD"</code>) in every call to <code>{@formatNumber}</code> in your templates can be a burden in a large code base, or simply because you use a different currency value per locale.
        In that case you can use <a href="#context-formats"><code>context.intl.formats.number</code></a> to define custom number formatters.
        The previous example can be rewritten as:
    </p>

{{#code "dust"}}
<ul>
    <li>{@formatNumber val=price formatName="usd"/}</li>
</ul>
{{/code}}

    <p>
        where <code>"usd"</code> is the key to a custom number format passed in the context when rendering the template:
    </p>

{{#code "js"}}
var context = {
    intl: {
        locales: 'en-US',
        formats : {
            number: {
                usd: {
                    style: 'currency',
                    currency: 'USD'
                }
            }
        }
    },
    price: 1000
};

dust.renderSource(template, context, function(error, html) {
    // rendered html available here
});
{{/code}}


    <h2 id="formatDate">Format Dates and Times Correctly</h2>

    <p>
        The <code>{@formatDate}</code> helper is used to present a date in a way appropriate for the current locale.
        It formats dates using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">Intl.DateTimeFormat</a> and returns the formatted string value.
    </p>

    {{~> example examples.date}}

    <p>
        Passing the formatting options (e.g.: <code>day="numeric" month="long" year="numeric"</code>) in every call to <code>{@formatDate}</code> in your templates can be a burden in a large code base, or simply because you want to use different options for different locales.
        In that case you can use <a href="#context-formats"><code>context.intl.formats.date</code></a> to define custom date formatters.
        The previous example can be rewritten as:
    </p>

{{#code "dust"}}
<p>{@formatDate val=date formatName="short"/}</p>
{{/code}}

    <p>
        where <code>"short"</code> is the key to a custom date format passed in the context when rendering the template:
    </p>

{{#code "js"}}
var context = {
    intl: {
        locales: 'en-US',
        formats : {
            date: {
                short: {
                    day: 'numeric',
                    month: 'long',
                    year: 'numeric'
                }
            }
        }
    },
    date: new Date()
};

dust.renderSource(template, context, function(error, html) {
    // rendered html available here
});
{{/code}}

    <p id="formatTime">
        The <code>{@formatTime}</code> is just like the <code>{@formatDate}</code> helper except it will reference any custom formats from <code>context.intl.formats.time</code>.
    </p>


    <h2 id="formatRelative">Format Dates Relative to "Now"</h2>

    <p>
        The <code>{@formatRelative}</code> helper is used to present a relative time in a way appropriate for the current locale.
        It formats the relative time following the rules from <a href="http://cldr.unicode.org/">Unicode CLDR</a> and returns the formatted string value.
    </p>

    {{~> example examples.relative}}

    <p>
        By default, the relative time is computed to the best fit, but you can explicitly choose <code>units</code> to be displayed in <code>"second"</code>, <code>"minute"</code>, <code>"hour"</code>, <code>"day"</code>, <code>"month"</code> or <code>"year"</code>.
    </p>

    {{~> example examples.relativeUnits}}

    <p>
        By default relative time will use locale-specific shorthand for certain relative times.
        For example, "1 day ago" will displayed as <code>yesterday</code>, "in 1 year" will be displayed as <code>next year</code>, etc.
        You can use <code>style="numeric"</code> to show numeric values always.
    </p>

    {{~> example examples.relativeStyle}}


    <h2 id="formatMessage">Format Labels in the Template</h2>

    <p>
        The <code>{@formatMessage}</code> helper is used to display messages that have been translated for the user's locale.
        In order to use it you'll need to translate your strings into all the languages you wish to show.
        These translations are provided in the <a href="{{pathTo 'guide'}}#messageformat-syntax">ICU Message</a> syntax, which is familiar to professional translators.
        The message format also supports choosing different strings based on pluralization, gender, or other considerations.
    </p>

    {{~> example examples.message}}


    <h2 id="context-requirements">Context Requirements</h2>
    <p>
    For dust-intl, the internationalization details are passed to the helpers via the <code>intl</code> key in the context.
    </p>


    <h3 id="context-locales"><code>intl.locales</code></h3>
    <p>
    This location in the context should be set to an <a href="http://en.wikipedia.org/wiki/IETF_language_tag">IETF language tag</a> for the current language.
    </p>

    <p>
    Example:
{{#code "js"}}
context = {
    intl: {
        locales: 'en-US'
    }
}
{{/code}}
    </p>


    <h3 id="context-formats"><code>intl.formats</code></h3>
    <p>
    This location in the context can be used to set different preset formats for the handlers.
    It is an object which contains keys named for each handler.
    </p>

    <p>
        These formats are supported in the <a href="#formatDate"><code>{@formatDate}</code></a>, <a href="#formatTime"><code>{@formatTime}</code></a>, and <a href="#formatNumber"><code>{@formatNumber}</code></a> helpers via the <code>formatName</code> parameter.
    </p>

    <p>Example:</p>
    {{#code "js"}}
    context = {
    intl: {
        formats: {
            // predefined formats for {@formatDate}
            date: {
                bill: { month: 'long' day: 'numeric' year: 'numeric'}
            },

            // predefined formats for {@formatTime}
            time: {
                hm: { hour: 'numeric', minute: 'numeric' }
            },

            // predefined formats for {@formatNumber}
            number: {
                eur: { style: 'currency', currency: 'EUR' },
                usd: { style: 'currency', currency: 'USD' }
            }
        }
    }
}
{{/code}}


    <h3 id="context-messages"><code>intl.messages</code></h3>
    <p>
    This location in the context is used by <a href="#formatMessage"><code>{@formatMessage}</code></a>.
    It is an object, each key being the name of a message, and each value being an <a href="http://userguide.icu-project.org/formatparse/messages">ICU formatted message</a>.
    The formatted messages should be appropriate for the user's current locale.
    </p>

    <p>
    These messages can be accessed in the <a href="#formatMessage"><code>{@formatMessage}</code></a> helper via the <code>_key</code> parameter.
    </p>

    <p>Example:</p>
    {{#code "js"}}
context = {
    intl: {
        messages: {
            photos: '...'
        }
    }
}
{{/code}}


</section>
