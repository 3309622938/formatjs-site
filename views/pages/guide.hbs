{{setTitle "Guide"}}

<section class="head">
    {{> nav}}
</section>

<section class="main docs l-wrap">
    <h1>Guide</h1>


    <h2 id="principals">Basic Internationalization Principals</h2>


    <h3 id="what-and-why">What Is Internationalization and Why Does It Matter</h3>
    <p>
        Internationalized software is software that is designed to support the languages and cultural customs of people throughout the world.
        The Web reaches all parts of the World, and so web apps need to be internationalized in order to provide a great user experience for the most number of people.
    </p>

    <p>
        Localization of software is adapting the software for a specific language and culture.
        This involves translating text messages into the user's language and presenting data in a format consistent with the user's expectations.
        An app is typically localized for a small set of <a href="#locales">locales</a>.
    </p>

    <p>
        The <a href="http://www.ecma-international.org/ecma-402/1.0/index.html#sec-4.1">ECMA-402 javascript internalization specification</a> has an excellent overview.
    </p>


    <h3 id="locales">Locales: Language and Region</h3>
    <p>
        A "locale" is the language a user speaks and the cultural expectations for a region.
        It is represented using a "locale code" defined in <a href="http://tools.ietf.org/html/bcp47">BCP 47</a>.
    </p>

    <p>
        This code is comprised of several parts separated by hyphens ({{code "-"}}).
        The first part is a short string representing the language.
        The second, optional, part is a short string representing the region.
        In addition, various extensions and variants can be specified.
    </p>

    <p>
        Typically webapps are localized to just the language or language-region combination.
        Examples of such locale codes are...
        <ul>
            <li>{{code "en"}} for English</li>
            <li>{{code "en-US"}} English as spoken in the United States</li>
            <li>{{code "en-GB"}} English as spoken in the United Kingdom</li>
            <li>{{code "es-AR"}} for Spanish as spoken in Argentina</li>
            <li>{{code "ar-001"}} for Arabic as spoken throughout the world</li>
            <li>{{code "ar-AE"}} for Arabic as spoken in United Arab Emerates</li>
        </ul>
    </p>

    <p>
        Most internationalized apps only support a small list of locales.
    </p>


    <h3 id="translating-strings">Translating Strings</h3>
    <p>
        You likely have some text in your application that is in a natural language such as English or Chinese.
        In order to support other locales you'll need to translate these strings.
        You'll need to translate all strings for all locales you wish to support.
    </p>

    <p>
        {{brand}} provides a mechanism for using these translations.
        This lets you write the core "software" of your application without special code for different languages.
        The considerations for each locale are encapsulated in the translated strings and our libraries.
    </p>


    <h3 id="bundling-translations">Bundling Translated Strings</h3>
    <p>
        It is very common to organize your translations based primarily on locale.
        This especially becomes important when using translations in the browser, where you only need the translations for one locale, the user's current locale.
    </p>

    <p>
        Our <a href="#integrations">template engine helpers</a> are designed to work with the translations for a single locale.
    </p>

    <p>
        (Translations can be further subdivided if your app is very complex, such as by page or section of the site.)
    </p>


    <h3 id="structure-code">Structure of Code</h3>
    <p>
        The actual formatting and presentation of data and translated strings typically takes these steps:
    </p>

    <ol>
        <li>
            Determine the user's locale, as described in <a href="#runtime-environments">Runtime Environments</a> below.
        </li>
        <li>
            Setup one of {{brand}}&apos;s <a href="#integrations">template engine helpers</a> with the following data:
            <ul>
                <li>the user's current locale</li>
                <li>translated strings for that locale</li>
                <li>optionally, any <a href="#TODO">custom formats</a></li>
            </ul>
        </li>
        <li>
            Call the template engine, passing the data that needs formatting.
        </li>
    </ol>


    <h2 id="patch-runtime">Patching the Runtime for Internationalization Support</h2>
<!--
    * quick intro to and list of the Intl built-ins and link off to the MDN docs pages
        * "here are the APIs we're expecting"
        * mention ecma402 spec
    * which runtimes need patching
    * how to patch
        * aligned with industry best practices
        * yepnopejs, or polyfill service (polyfill.io)
    * intl.js polyfill
        * loading locale data for intl.js
        * mention lack of Intl.Collator
-->


    <h2 id="runtime-environments">Runtime Environments</h2>
<!--
    * server-side
        * loading the libraries
        * patch Intl
        * determining the user's locale
            * best:  user explicitly chooses, you save in user's profile (in a DB)
            * `Accept-Language` HTTP request header
                * need to match to a locale that your app supports
            * good NPM library(ies) to match against that
                * https://www.npmjs.org/search?q=accept-language
                * http://expressjs.com/4x/api.html#req.acceptsLanguages
    * syncing server-side and client-side
    * client-side
        * loading the libraries
        * determining the user's locale
            * best:  use locale passed by your server
            * client-site-only app best:  user explicitly chooses, you save in user's profile
            * `navigator.language || navigator.browserLanguage`
                * need to match to a locale that your app supports
        * patch Intl
            * loading locale data (for user's current locale)
-->


    <h2 id="messageformat-syntax">Message Format Syntax</h2>
<!--
    * standard
        * ICU (used in java, php, objective-c)
    * basic principals
        * text (or text element)
        * argument
    * simple argument
        * syntax
    * formatted arguments ({x, number}, {x, date}, and {x, time})
        * syntax
        * predefined options
            * for each type
        * creating your own options
    * {select} format
        * syntax
        * matching rules
        * nesting
    * {plural} format
        * syntax very similar to {select}
        * pluralization groups (link to CLDR page)
        * offset
        * specific value matches ('=43')
-->


</section>
