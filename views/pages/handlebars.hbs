{{setTitle "Handlebars"}}
{{setDescription "Documentation and examples of Handlebars integration."}}

<section class="head">
    {{> nav}}
</section>

<section class="intro">
    <div class="l-wrap">
        <h1 class="intro-package">
            <span class="intro-package-name">
                Handlebars Intl
            </span>
            <img class="intro-package-mark" alt="Handlebars logo" src="/img/handlebars.png">
        </h1>

        <h2 class="tagline">{{package.description}}</h2>

        {{> integrations/package-meta}}

    </div>

    {{> integrations/package-install}}
</section>

<section class="main docs l-wrap">

    <p>This library provides a series of helpers to internationalize your handlebars templates:</p>

    <ul>
        <li><a href="#formatDate"><code>\{{formatDate}}</code></a> to format a date value</li>
        <li><a href="#formatTime"><code>\{{formatTime}}</code></a> to format a date value with time formats</li>
        <li><a href="#formatRelative"><code>\{{formatRelative}}</code></a> to format a date relative to now; e.g. "3 hours ago"</li>
        <li><a href="#formatNumber"><code>\{{formatNumber}}</code></a> to format a numeric value</li>
        <li><a href="#formatMessage"><code>\{{formatMessage}}</code></a> to format a complex message</li>
        <li><a href="#intlGet"><code>(intlGet)</code></a> to resolve messages in a subexpression
        </li>
        <li><a href="#intl"><code>\{{#intl}}</code></a> to create intl data scope in a block</li>
    </ul>


    <h2>How It Works</h2>

    <p><strong>Template Source:</strong></p>

{{#code "hbs"}}
<b>Price:</b> \{{formatNumber price style="currency" currency="USD"}}
{{/code}}

    <p><strong>Render Template:</strong></p>

{{#code "js"}}
var intlData = {
    locales: 'en-US'
}

var context = {
    price: 1000
};

var html = template(context, {
    data: {intl: intlData}
});
{{/code}}

    <p><strong>Output:</strong></p>

{{#code "html"}}
<b>Price:</b> $1,000.00
{{/code}}

    <h2>Features</h2>

    <ul>
        <li>Formats <strong>numbers</strong> and <strong>dates/times</strong>, including those in complex messages.</li>
        <li>Formats <strong>relative times</strong> (e.g., "3 hours ago").</li>
        <li>Formats complex messages, including <strong>plural</strong> and <strong>select</strong> arguments using <a href="{{pathTo 'guide'}}#messageformat-syntax">ICU Message syntax</a>.</li>
        <li>Supports custom formatters for <strong>numbers</strong> and <strong>dates/times</strong>.</li>
    </ul>



    <h2 id="usage">Usage</h2>

    <h3 id="install-browser">Browser</h3>

    <h4>1. Load the scripts into your page</h4>

{{#code "html"}}
<script src="handlebars/handlebars.min.js"></script>
<script src="handlebars-intl/handlebars-intl.min.js"></script>
{{/code}}

    <h4>2. Register the helpers</h4>

{{#code "js"}}
HandlebarsIntl.registerWith(Handlebars);
{{/code}}

    <p class="note">
    <strong>NOTE:</strong>
    Older browsers and Safari do not provide the global {{code "Intl"}} object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch the browser</a> using a polyfill.
    </p>


    <h3 id="install-node">Node/CommonJS</h3>

    <h4>1. Require the module</h4>

{{#code "js"}}
if (!global.Intl) {
    global.Intl = require('intl'); // install and use polyfill for ECMA-402
}
var Handlebars = require('handlebars');
var HandlebarsIntl = require('handlebars-intl');
{{/code}}

    <h4>2. Register the helpers</h4>

{{#code "js"}}
HandlebarsIntl.registerWith(Handlebars);
{{/code}}

    <p class="note">
    <strong>NOTE:</strong>
    Node (as of 0.10) doesn't provide the global <code>Intl</code> object (ECMA-402).
    Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch nodejs</a> using a polyfill.
    </p>


    <h2 id="formatNumber">Format numbers with separators</h2>

    <p>
    <code>\{{formatNumber}}</code> helper is used to present a number in a way appropriate for the current locale. It formats numbers using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat">Intl.NumberFormat</a>, and returns the formatted string value.
    </p>

    {{~> example examples.number}}

    <p>Passing the formatting options (e.g.: <code>style="currency" currency="USD"</code>) in every call to <code>\{{formatNumber}}</code> in your templates can become a problem in large code bases, or simply because you use different currency value per locale. In that case, you can setup <code>data.intl.formats.number</code> to define application level number formatters. The previous example can be reduced to:</p>

{{#code "hbs"}}
<ul>
    <li>\{{formatNumber price "coinage"}}</li>
</ul>
{{/code}}

    <p>where <code>"usd"</code> is the key to a custom number format passed in <code>intlData</code> when rendering the template:</p>

{{#code "js"}}
var intlData = {
    locales : 'en-US',
    formats : {
        number: {
            coinage: {
                style: 'currency',
                currency: 'USD'
            }
        }
    }
};
var html = template(context, {
    data: {intl: intlData}
});
{{/code}}



    <h2 id="formatDate">Format dates and times correctly</h2>

    <p>
    <code>\{{formatDate}}</code> helper is used to present a date in a way appropriate for the current locale. It formats dates using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">Intl.DateTimeFormat</a>, and returns the formatted string value.
    </p>

    {{~> example examples.date}}

    <p>Passing the formatting options (e.g.: <code>day="numeric" month="long" year="numeric"</code>) in every call to <code>\{{formatDate}}</code> in your templates can become a problem in large code bases, or simply because you want to use different options for different locales. In that case, you can setup <code>data.intl.formats.date</code> to define application level date formatters. The previous example can be reduced to:</p>

{{#code "hbs"}}
<p>\{{formatDate date "short"}}</p>
{{/code}}

    <p>where <code>"short"</code> is the key to a custom date format passed in <code>intlData</code> when rendering the template:</p>

{{#code "js"}}
var intlData = {
    locales : 'en-US',
    formats : {
        date: {
            short: {
                day: 'numeric',
                month: 'long',
                year: 'numeric'
            }
        }
    }
};
var html = template(context, {
    data: {intl: intlData}
});
{{/code}}


    <p id="formatTime"><code>\{{formatTime}}</code> is just like the <code>\{{formatDate}}</code> helper, except it will reference any string-named `format` from <code>data.intl.formats.time</code>.</p>



    <h2 id="formatRelative">Format dates relative to "now"</h2>

    <p>
    <code>\{{formatRelative}}</code> helper is used to present a relative time in a way appropriate for the current locale. It formats the relative time following the rules from <a href="http://cldr.unicode.org/">Unicode CLDR</a>, and returns the formatted string value.
    </p>

    {{~> example examples.relative}}

    <p>By default, the relative time is computed to the best fit unit, but you can explicitly choose <code>units</code> to be displayed in <code>"second"</code>, <code>"minute"</code>, <code>"hour"</code>, <code>"day"</code>, <code>"month"</code> or <code>"year"</code>.</p>

    {{~> example examples.relativeUnits}}

    <p><code>style</code> provide another level of customization, the relative time is computed as <code>"best fit"</code>, which means that instead of "1 day ago", it will display "yesterday", or "in 1 year" will be "next year", etc. But you can choose to use <code>style="numeric"</code>.

    {{~> example examples.relativeStyle}}

    <h2 id="formatMessage">Pluralize labels in strings</h2>

    <p>
    In order to use the <code>\{{formatMessage}}</code> helper you'll need to translate your strings into all the languages you wish to show.
    These translations are provided in the <a href="http://userguide.icu-project.org/formatparse/messages">ICU Message</a> syntax, which is familiar to professional translators.
    The message format also supports choosing different strings based on pluralization, gender, or other considerations.
    See the <a href="{{pathTo 'guide'}}#messageformat-syntax">Guide</a> for more details on how to
    write those messages.
    </p>

    {{~> example examples.message}}

    <p>Additionally, if the message string contains HTML code, you can use <code>\{{formatHTMLMessage}}</code>, which has the exact same API but will not escape the formatted message. Remember to sanitize every value you pass into the helper to prevent XSS injections.</p>

    <h2 id="intlGet">Message Lookup by Path</h2>

    <p><code>(intlGet)</code> is an utility helper for accessing and returning the value the properties from the i18n data supplied to Handlebars via a string namespace.</p>

    <p>In the example above, we use <code>(intlGet "messages.photos")</code> as a subexpression to delegate the lookup process for <code>"message.photos"</code>. It is equivalent to the value from <code>@data.intl.messages.photos</code>, but it provides descriptive error messages when accessing a property that is <code>undefined</code>, unlike Handlebars built-in data channel access syntax <code>@</code>.</p>

    <h2 id="intl">Create Intl Lambda</h2>

    <p><code>\{{#intl}}</code> is a block helper that can be used to create a new intl data scope by updating the i18n data supplied to Handlebars within the block. This is useful when you need to render part of the page in a particular locale, or need to supply the i18n data to Handlebars via the template context â€” some Handlebars integrations might not support supplying options.data.intl when rendering. You can also use it to have different sections of the page rendered with different locales.</p>

    {{~> example examples.intl}}

    <p>You can apply the same principle for <code>formats</code> and <code>messages</code>, which are normally passed thru <code>intlData</code> value when rendering the template.</p>

</section>
