{{setTitle "Internationalization in the Browser"}}

<h1>Internationalization in the Browser</h1>

<p>
In the early days of browser development, internationalization would happen most often on the server,
since browsers did not have a standard way of formatting things like dates and numbers based on
the locale of the browser. With more modern browsers we have the benefit of the ECMAScript internationalization
API (<a href="http://www.ecma-international.org/ecma-402/1.0/#sec-8">ECMA-402</a>) which provides
language sensitive string comparison, number formatting, and date and time formatting.
</p>
<p>
This is of great benefit for developers of websites and single page applications where data is often
downloaded dynamically without location specific formatting. The
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl">{{code "Intl"}}</a> object
provides constructors for {{code "Collator"}}, {{code "NumberFormat"}}, and {{code "DateTimeFormat"}}
which give browser developers the basic tools they need for formatting.
</p>
<p>
Here are some examples:
</p>

<h2>Date Formatting</h2>

<p>
You can format dates easily once you create a {{code "Date"}} object and call
the {{code "format"}} method on {{code "Intl.DateTimeFormat"}}.
</p>

{{#code "js"}}
var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));
alert(new Intl.DateTimeFormat().format(date));
{{/code}}

Returns "{{code "12/19/2012"}}" if run in the {{code "en-US"}} locale with time zone {{code "America/Los-Angeles"}}.
Using {{code "Intl.DateTimeFormat()"}} with no arguments will use the system's locale and time zone.

{{#code "js"}}
alert(new Intl.DateTimeFormat("en-GB").format(date));
{{/code}}

Returns "{{code "19/11/2012"}}" as British English uses day-month-year order.

{{#code "js"}}
alert(new Intl.DateTimeFormat("ko-KR").format(date));
{{/code}}

Returns "{{code "2012년 12월 19일"}}" as Korean uses year-month-day order.

<p>
You can also format dates and times via the {{code "options"}} argument:
</p>

{{#code "js"}}
var options = {weekday: "long", year: "numeric", month: "long", day: "numeric"};
alert(new Intl.DateTimeFormat("de-DE", options).format(date));
{{/code}}

Returns "{{code "Mittwoch, 19. Dezember 2012"}}" as you requested a weekday along with a long date.

<p>
Note how you have the same date information in {{code "date"}} but specifying a different locale or formatting options
changes the output. You can find out more about date formatting via the Intl specification
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">here</a>.
<p>

<h2>Number Formatting</h2>

<p>
You can also format numbers in a similar fashion using {{code "Intl.NumberFormat"}}.
</p>

{{#code "js"}}
var number = 123456.789;
alert(new Intl.NumberFormat().format(number));
{{/code}}

Returns "{{code "123,456.789"}}" when in the US English locale.

<p>
As in {{code "Intl.DateTimeFormat"}} you can pass in a specific locale to specify a different language.
</p>


{{#code "js"}}
alert(new Intl.NumberFormat("ar-EG").format(number));
{{/code}}

Returns "{{code "١٢٣٬٤٥٦٫٧٨٩"}}" using real Arabic digits that are used in that language.

<p>
And just like  {{code "Intl.DateTimeFormat"}} ,  you can use the {{code "options"}} argument to
customize the formatting.
</p>


{{#code "js"}}
alert(new Intl.NumberFormat("de-DE", {style: "currency", currency: "EUR"}).format(number));
{{/code}}

Returns "{{code "23.456,789 €"}}" using the Euro symbol.

<h2>Browser Compatibility</h2>

For browsers that support {{code "window.Intl"}}, this makes it easy to do basic formatting of numbers
and dates. However, the {{code "window.Intl"}} object is relatively new so not all modern browsers
and devices support it. Here's a breakdown of desktop and mobile browsers support.

<h3>Desktop</h3>
<table class="pure-table">
    <tbody>
        <tr>
            <th>Feature</th>
            <th>Chrome</th>
            <th>Firefox (Gecko)</th>
            <th>Internet Explorer</th>
            <th>Opera</th>
            <th>Safari (WebKit)</th>
        </tr>
        <tr>
            <td>Basic&nbsp;support</td>
            <td>24</td>
            <td>29</td>
            <td>11</td>
            <td>15</td>
            <td><span class="warning">Not&nbsp;supported</span></td>
        </tr>
    </tbody>
</table>

<h3>Mobile</h3>
<table class="pure-table">
    <tbody>
        <tr>
            <th>Feature</th>
            <th>Android</th>
            <th>Chrome for Android</th>
            <th>Firefox Mobile (Gecko)</th>
            <th>IE Phone</th>
            <th>Opera Mobile</th>
            <th>Safari Mobile</th>
        </tr>
        <tr>
            <td>Basic support</td>
            <td><span class="warning">Not&nbsp;supported</span></td>
            <td>26</td>
            <td><span class="warning">Not&nbsp;supported</span><br>
            <a class="external external-icon" href="https://bugzilla.mozilla.org/show_bug.cgi?id=864843" title="Enable ECMAScript Internationalization API for Firefox on Android">bug&nbsp;864843</a></td>
            <td><span class="warning">Not&nbsp;supported</span></td>
            <td><span class="warning">Not&nbsp;supported</span></td>
            <td><span class="warning">Not&nbsp;supported</span></td>
        </tr>
  </tbody>
 </table>



