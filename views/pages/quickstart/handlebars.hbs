{{addRemoteJS "//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.4/handlebars.min.js"}}
{{setTitle "Client-side Intl with Template Engines"}}

<h1>Client-side Internationalization with Template Engines</h1>

<aside>
    <p>
        This page explains how you can localize text on the client side with the provided <a href="/quickstart#helpers-and-template-engines">Intl Helpers</a>. For this example, we are using Handlebars as our template engine, and leveraging the <a href="/handlebars">Intl Handlebars Helpers</a>.
    </p>

    <p>
        For a more general introduction to Internationalization in the browser, <a href="/quickstart/browser">visit this page</a>.
</aside>


{{sectionHeading "Overview"}}

<p>
    When localizing strings in the browser, application developers have the choice of using the <a href="/javascript">IntlMessageFormat JavaScript API</a>, or using helpers for the template engine of their choice (Dust, React, or Handlebars). In this guide, we'll be using the <a href="/handlebars">Intl Handlebars Helpers</a> to localize strings in the browser.
</p>

<p>
    Even though we are leveraging Handlebars in this example, the same concepts can be extended if you wish to use Dust or React.
</p>

{{sectionHeading "Example"}}
<p>
    Here's the example that we'll be making. Toggle the dropdown to view the example in different languages.
</p>

<div class="example" id="travel-example">
    {{{examples.travel.rendered}}}
</div>
<div class="splash-example-switcher" id="switcher">View this example in <select></select></div>

{{sectionHeading "Set Up"}}


<p>
    For this project, all we need is an {{code "index.html"}} file. We'll be putting all of our CSS, JavaScript and HTML inside this file to make it easy to follow. Here's a basic HTML file that you can use as a starting point.
</p>

{{#code "html"}}
<!DOCTYPE html>
<html lang="en">
<body>
    <div class="example">
        <div class="example-message" id="message"></div>
        <div>
            View this example in
            <select id="switcher">
                <option value="en_US">en-US</option>
                <option value="es_AR">es-AR</option>
                <option value="fr_FR">fr-FR</option>
                <option value="zh_HK">zh-HK</option>
            </select>
        </div>
    </div>
</body>
</html>
{{/code}}

{{sectionHeading "Loading JavaScript Assets"}}

<p>
    For this example, we need the following JavaScript assets:
    <ul>
        <li>{{code "yepnope.js"}}: Conditionally load JavaScript files</li>
        <li>{{code "intl.js"}}: Intl polyfill if the browser does not have Intl support</li>
        <li>{{code "intlMessageFormat.js"}}: The underlying JS API for localizing strings, dates and times.</li>
        <li>{{code "handlebars.js"}}: We're using the Handlebars template engine for this example.</li>
        <li>{{code "handlebars-helper-intl.js"}}: The Intl Handlebars helpers that we'll be using.
    </ul>

</p>

<p>
    Since this is an example, we can pull in all of these files via <a href="http://rawgit.com">RawGit</a> and <a href="http://cdnjs.com">CDNJS</a>. In a real project, you'll probably want to pull in these files via <a href="http://bower.io">Bower</a> or another dependency management system. <strong>The order in which the JavaScript files are executed is important</strong>. Therefore, we're going to be using <a href="#">YepNope</a> to load these files in the correct order.
</p>

<p>
    First, let's add {{code "yepnope.js"}} and {{code "handlebars.js"}} to the page. Add this above the closing {{code "</body>"}} tag.
</p>

{{#code "html"}}
<script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.4/handlebars.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/yepnope/1.5.4/yepnope.min.js"></script>
{{/code}}

<p>
    Next, we'll add a code snippet telling the browser to load the {{code "Intl.js"}} polyfill if the browser does not supporting {{code "Intl"}} natively. At this time, we'll also load {{code "intlmessageformat.js"}} and {{code "handlebars-helper-intl.js"}}. Finally, we'll define an {{code "init()"}} function that will be executed once all these scripts are loaded.
</p>

<p>Add this code snippet after the {{code "yepnope.js"}} script that you added earlier:</p>
{{#code "js"}}
yepnope([{
    // Test to see if Intl exists natively in the browser.
    test : !!window.Intl,

    // We are assuming you're using the en-US locale, but you can change that here.
    nope : 'http://yui.yahooapis.com/combo?platform/intl/0.1.2/Intl.min.js&platform/intl/0.1.2/locale-data/jsonp/en-US.js'
},
{
    // Other scripts to load.
    load : [
        'https://cdn.rawgit.com/yahoo/intl-messageformat/master/build/intl-messageformat.complete.min.js',
        'https://cdn.rawgit.com/yahoo/handlebars-helper-intl/master/dist/helpers.min.js'
    ],

    // Call init() when everything is loaded.
    complete : init
}
]);

function init() {
    // We will add some stuff in here.
}
{{/code}}

<p>Now that everything's loaded, we can start on setting up the localized strings.</p>

{{sectionHeading "Creating the Intl Context"}}

<p>
    In the example above, we have a simple sentence that has been translated into 4 different languages: English, French, Spanish and Mandarin. Next, we're going to be creating these messages using JavaScript for this example.
<p>

<aside>
    <p>
        In a real-world example, these translations could be done dynamically via an API, but let's keep things simple for now!
    </p>
</aside>

<p>
    If you haven't created these messages before, their syntax may appear new to you. Don't worry, it's pretty simple. Essentially, we are creating strings with placeholders (using {{code "{ }"}}. In some cases, telling the Intl API how to format these placeholders (either as {{code "date"}}, {{code "number"}}, etc.). This API is listed in more detail on the <a href="/javascript/">IntlMessageFormat API</a> page.
</p>

<p>
    Add the following snippet inside the {{code "init()"}} function that was created earlier:
</p>

{{#code "js"}}

   var intl = {
        // These messages tell the Intl API how to render the string for different locales.
        // Intl will take care of formatting the dates, strings, and numbers for different
        // locales based on the placeholder properties.
        messages: {
            "en_US": {
                "TRAVEL": "{firstName} {lastName} will travel to Peru on {travelDate, date, long} for {price, number, USD}."
            },
            "fr_CA": {
                "TRAVEL": "{firstName} {lastName} voyagera à Peru le {travelDate, date, long} pour {price, number, USD}."
            },
            "es_AR": {
                "TRAVEL": "{firstName} {lastName} viajará a Perú el {travelDate, date, long} por {price, number, USD}"
            }
        },

        // These formats tell Intl to render "USD" and "EUR" in currency form.
        formats: {
            number: {
                USD: {
                    style   : 'currency',
                    currency: 'USD'
                },
                EUR: {
                    style   : 'currency',
                    currency: 'EUR'
                }
            }
        }
    };
{{/code}}

<aside>
    <p>
        The messages you just created are template-engine agnostic. Whether you use Handlebars, Dust, React or the JavaScript IntlMessageFormat API, your translated messages will look the same.
    </p>
</aside>

{{sectionHeading "Creating the User Context"}}
<p>
    If you examine the {{code "messages"}} we created in the snippet above, you'll see that we refer to {{code "{firstName}"}}, {{code "{lastName}"}} and other such placeholders. Let's create a JavaScript object with these properties.
</p>

<p>Add the following code snippet below the {{code "intl"}} variable assignment:</p>

{{#code "js"}}
var context = {
    firstName : "Tilo",
    lastName  : "Mitra",
    travelDate: new Date(),
    price     : 465
};
{{/code}}


{{sectionHeading "Creating the Handlebars Template"}}

<p>
    Now that we've got our Intl and user context variables created, we can set up a Handlebars template, and compile and render it with the appropriate context.
</p>

<p>Add the following {{code "<script>"}} tag to your page. This will define the Handlebars template's source. You can add this just before the closing {{code "</body>"}}.</p>


<aside>
    <p>
        If you haven't referred to the <a href="/handlebars/">Intl Handlebars Helpers</a> documentation, the helpers below may appear new to you. We are wrapping the {{code "{{intlMessage}}"}} helper inside a {{code "{{#intl}}"}} context. Check out the Handlebars documentation for more information.
    </p>
</aside>

{{#code "html"}}
<script type="x-handlebars-template/text" id="travel-example-source">
    \{{#intl locales=intl.locale messages=intl.messages formats=intl.formats}}
        <p>
        \{{intlMessage (intlGet "messages.TRAVEL")
                firstName=user.firstName
                lastName=user.lastName
                travelDate=user.travelDate
                price=user.price}}
        </p>
    \{{/intl}}
</script>
{{/code}}

<p>
    If you examine the code above, you'll notice that we're setting up references to the the context objects ({{code "intl"}}, and {{code "user"}}) within the Handlebars helper. We're also telling the helper to "get a message from {{code "messages.TRAVEL"}}". Once we compile the Handlebars template, these references will allow us to correctly render the string.
</p>


{{sectionHeading "Compiling and Rendering"}}

<p>
    With the template and the contexts in place, we can compile and render the localized string to the page.
</p>

<p>
    Before we can do that, we have one final set-up step. We have to register the <a href="/handlebars/">Intl Handlebars Helpers</a> with Handlebars, so that the helpers are available for use.
</p>

<p>Append the following line to the {{code "init()"}} function:</p>

{{#code "js"}}
HandlebarsHelperIntl.registerWith(Handlebars);
{{/code}}


<h3>Compiling the template</h3>
<p>
    Compiling a Handlebars template is pretty easy. Add the following lines to {{code "init()"}} function:
</p>

{{#code "js"}}
var source   = document.getElementById('travel-example-source').innerHTML,
    template = Handlebars.compile(source);
{{/code}}

<h3>Rendering the template</h3>

<p>
    To render the template, we need to pass in the context objects that we created earlier. However, we want to render the template each time we change the {{code "<select>"}} element's value, so let's create a new function called {{code "render()"}}:
<p>

{{#code "js"}}
function render (locale, template) {
    var html = template({
        intl: {
            messages: intl.messages[locale],
            formats: intl.formats
        },
        user: context
    });

    document.getElementById('travel-example').innerHTML = html;
}
{{/code}}

<p>
    Next, call the {{code "render()"}} function that we just defined, so that the template gets rendered after the initial page load.
</p>

{{#code "js"}}
render(switcher.value, template);
{{/code}}

<h3>Setting up Event Listeners</h3>

<p>
    Finally, let's set up some event listeners so that our {{code "render()"}} function gets called whenever the {{code "<select>"}} element is changed.
</p>

<p>Add the following inside the {{code "init()"}} function:</p>

{{#code "js"}}
var switcher = document.getElementById('switcher');
switcher.addEventListener('change', function(e) {
    render(e.srcElement.value, template);
});
{{/code}}


{{sectionHeading "Complete Source"}}

<p>
    <a href="/quickstart/handlebars/rendered">Here's a complete source</a> of the page that we just created. Feel free to refer to it if you run into any issues. It's also copy/paste friendly.
</p>

{{sectionHeading "Moving Forward"}}

<p>
    The example that we just created was rendered completely on the client-side for simplicity. In a real-world project, we recommend rendering the initial response on the server. Check out the <a href="node">Server Quickstart Guide</a> to learn more about localizing strings on the server.
</p>
